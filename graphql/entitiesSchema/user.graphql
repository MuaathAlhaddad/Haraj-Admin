extend type Mutation {
    sendOTP(phone_no: String!): Response!
        @field(
            resolver: "App\\GraphQL\\Mutations\\PhoneVerificationMutator@sendOTP"
        )

    verifyOTP(verification_code: String!, phone_no: String!): Response!
        @field(
            resolver: "App\\GraphQL\\Mutations\\PhoneVerificationMutator@verifyOTP"
        )

    createUser(input: CreateUserInput! @spread): User @create

    updateUser(input: UpdateUserInput! @spread): User @update @guard

    login(input: LoginUserInput! @spread): AccessToken!

    logout: LogoutResponse! @guard

    # TODO: There should be a mutation to check the email duplication in first step of user reg as well as for the phone number duplication in the second step
}

extend type Query {
    users(orderBy: _ @orderBy(columnsEnum: "UserColumns")): [User!]!
        @paginate(type: PAGINATOR, defaultCount: 10)
        @softDeletes

    user(id: ID @eq): User @find @softDeletes

    findByPhone(phone_no: String! @eq): User @find

    currentUser: User @auth
}

type User {
    id: ID!
    name: String
    email: String
    email_verified_at: DateTime
    password: String
    phone_no: String
    gender: String
    phone_verified_at: DateTime
    remember_token: String
    deleted_at: DateTime
    created_at: DateTime
    updated_at: DateTime
    ads: [Ad!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    country: Country @belongsTo
    state: State @belongsTo
    messages: [Message!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    comments: [Comment!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    reviews: [Review!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    attachments: [Attachment!]! @morphMany(type: PAGINATOR, defaultCount: 10)
    metadata: [Metadata!]! @morphMany(type: PAGINATOR, defaultCount: 10)
    reports: [Report!]! @morphMany(type: PAGINATOR, defaultCount: 10)
}
input CreateUserInput @validator {
    name: String
    phone_no: String
    email: String
    gender: String
    password: String @hash
    country: CreateCountryBelongsTo
    state: CreateStateBelongsTo
}
input UpdateUserInput @validator {
    id: ID
    name: String
    email: String
    password: String @hash
    gender: String
    country: CreateCountryBelongsTo
    state: CreateStateBelongsTo
}
input CreateCountryBelongsTo {
    connect: ID
}
input CreateStateBelongsTo {
    connect: ID
}
input LoginUserInput {
    phone_no: String
    password: String
}
type AccessToken {
    access_token: String
    token_type: String
}
type LogoutResponse {
    status: LogoutStatus!
    message: String!
}
enum LogoutStatus {
    """
    TOKEN_REVOKED
    """
    TOKEN_REVOKED
}
type Response {
    data: ResponseData
    errors: String
}
type ResponseData {
    status: String
    message: String
}
