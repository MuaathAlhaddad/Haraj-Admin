extend type Mutation {
    createUser(phone_no: String @rules(9)): String!
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@create")

    verifyPhoneNumber(verification_code: String!, phone_no: String!): String
        @field(
            resolver: "App\\GraphQL\\Mutations\\UserMutator@verifyPhoneNumber"
        )

    updateUser(
        phone_no: String!
        name: String! 
        email: String!  
        password: String! @hash
    ): String
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@updateUser")
}

extend type Query {
    users(orderBy: _ @orderBy(columnsEnum: "UserColumns")): [User!]!
        @paginate(type: PAGINATOR, defaultCount: 10)
        @softDeletes

    user(id: ID @eq): User @find @softDeletes

    findByPhone(phone_no: String! @eq): User @find
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    password: String!
    phone_no: String!
    gender: String
    phone_verified_at: DateTime
    remember_token: String
    deleted_at: DateTime
    created_at: DateTime
    updated_at: DateTime
    ads: [Ad!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    country: Country @belongsTo
    state: State @belongsTo
    messages: [Message!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    comments: [Comment!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    reviews: [Review!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    attachments: [Attachment!]! @morphMany(type: PAGINATOR, defaultCount: 10)
    metadata: [Metadata!]! @morphMany(type: PAGINATOR, defaultCount: 10)
    reports: [Report!]! @morphMany(type: PAGINATOR, defaultCount: 10)
}
